# -*- coding: utf-8 -*-
"""working.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1llsccnklCzs7EZSELP6MVysncixaZnQR

## Notebook settings
"""
# region Import
# Data download
# Import basic
import warnings

import pandas as pd
# Plottool
import plotly.graph_objs as go
# IPython
# Hyperopt bayesian optimization
# Keras
# SKLearn
from sklearn.neighbors import KernelDensity

# Init google drive
# from google.colab import drive

# endregion

# region File mount and config
# drive.mount('/content/gdrive', force_remount=True)
root_dir = ""
data_dir = root_dir + 'stock'
model_dir = root_dir + 'model'

pd.options.display.max_columns = 12
pd.options.display.max_rows = 24

# disable warnings in Anaconda
warnings.filterwarnings('ignore')

# endregion

# region Data Loading
stock_name = '000001.SS'  # SSE Composite Index
# df_org = yf.download(stock_name, start="1991-01-01", end="2016-12-31", interval="1wk")
# df_org.to_csv(f'{base_dir}/{stock_name}.csv')
df_org = pd.read_csv(f'{data_dir}/{stock_name}.csv', parse_dates=['Date'])
df_org = df_org.sort_values('Date')
df_org.reset_index(inplace=True)
df_org = df_org[['Date', 'Close', 'Open', 'High', 'Low', 'Adj Close', 'Volume']]


# endregion

# region Data ploting
def plot_ohlc(df):
    trace = go.Ohlc(x=df['Date'],
                    open=df['Open'],
                    high=df['High'],
                    low=df['Low'],
                    close=df['Close'],
                    increasing=dict(line=dict(color='#58FA58')),
                    decreasing=dict(line=dict(color='#FA5858')))

    layout = {
        'title': f'{stock_name} Historical Price',
        'xaxis': {'title': 'Date',
                  'rangeslider': {'visible': False}},
        'yaxis': {'title': f'Price'}
    }

    data = [trace]

    fig = go.Figure(data=data, layout=layout)
    fig.write_html(f'ohlc_{stock_name}.html', auto_open=True)
    fig.show()


# plot_ohlc(df_org)
input_col = ['Close', 'Open', 'High', 'Low', 'Adj Close', 'Volume']

kde = KernelDensity(kernel='exponential', bandwidth=0.2)
kde_col = kde.fit(df_org[input_col])
a = kde_col.score_samples(df_org[input_col])

b = 1
# endregion